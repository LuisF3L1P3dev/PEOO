# -*- coding: utf-8 -*-
"""Cópia de UML Q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qt_WVN03VG7cPrDUClZEHfxLp8LvUU9D
"""

import datetime

class Passageiro():

  def __init__(self, nome, idade, telefone, passaporte, reservas=[]):
    self.__nome = nome 
    self.__idade = idade
    self.__telefone = telefone
    self.__passaporte = passaporte
    self.__reservas = reservas

  def CancelarReserva(self,reserva):

      voo = reserva.getVoo()
      reservas = voo.getReservas()
      reservas.remove(reserva)
      voo.setReservas(reservas)

  def CriarReserva(self, valor, voo, passageiro, tipoPagamento):

    if voo.AssentosLivres() > 0:

      reserva = voo.Reserva(valor, voo, passageiro, tipoPagamento)
      self.__reservas.append(reserva)

      return reserva
    
    else:
      return print("Sem assentos livres")
  
  def PagarReservas(self, reservas:list() ):
    #somente quando o passageiro paga a reserva ela é validada no voo
    for i in reservas:
      voo = i.getVoo()
      if voo.AssentosLivres() > 0:
        
        valor = i.getValor()
        formaPagamento = i.getTipoPagamento()
        print("Pagamento de R${} efetuado em {}".format(valor, formaPagamento))

        reservasVoo = voo.getReservas()
        reservasVoo.append(i)
        voo.setReservas(reservasVoo)


class Voo():

  class Reserva():

    def __init__(self, valor, voo, passageiro, tipoPagamento):
      self.__valor = valor 
      self.__voo = voo
      self.__passageiro = passageiro
      self.__tipoPagamento = tipoPagamento

    def getVoo(self):
      return self.__voo

    def setVoo(self):
      self.__voo = voo

    def getValor(self):
      return self.__valor

    def getTipoPagamento(self):
      return self.__tipoPagamento

  def __init__(self, codigo, horario, data, aeroportoPartida, aeroportoDestino, tipoVoo, assentos, reservas=[], tripulacao=[]):
    self.__codigo = codigo
    self.__horario = horario
    self.__data = data
    self.__aeroportoPartida = aeroportoPartida
    self.__aeroportoDestino = aeroportoDestino
    self.__tipoVoo = tipoVoo
    self.__assentos = assentos
    self.__reservas = reservas
    self.__tripulacao = tripulacao

  def AssentosLivres(self):

    return int(self.__assentos - len(self.__reservas))

  def NumeroTripulantes(self):

    return len(self.__tripulacao)

  def getReservas(self):
    return self.__reservas

  def setReservas(self, reservas):
    self.__reservas = reservas

  def setTripulacao(self,tripulacao):
    self.__tripulacao = tripulacao

  def getTripulacao(self):
    return self.__tripulacao

class Operador():

  def __init__(self, nome, salario, rg, endereco, telefone):
    self.__nome = nome
    self.__salario = salario
    self.__rg = rg
    self.__endereco = endereco
    self.__telefone = telefone

  def CriarReserva(self, valor, voo, passageiro, tipoPagamento):

    if voo.AssentosLivres() > 0:

      reserva = voo.Reserva(valor, voo, passageiro, tipoPagamento)
      vooReservas = voo.getReservas()
      vooReservas.append(reserva)
      voo.setReservas(vooReservas)
      return reserva
    
    else:
      return print("Sem assentos livres")


  def CancelarReserva(self,reserva):


    voo = reserva.getVoo()
    reservas = voo.getReservas()
    reservas.remove(reserva)
    voo.setReservas(reservas)



class Aeroporto():
  
  def __init__(self, localizacao, maxDecolagensHora, nome, operadores=[]):
    self.__localizacao = localizacao
    self.__maxDecolagensHora = maxDecolagensHora
    self.__nome = nome
    self.__operadores = operadores


class Tripulante():
  def __init__(self,nome, rg, telefone, funcao ):
    self.__nome =  nome
    self.__rg = rg
    self.__telefone = telefone
    self.__funcao = funcao

import datetime

aeroporto1 = Aeroporto("Pau dos Ferros/RN", 10, "Aeroporto Pauferrense")
aeroporto2 = Aeroporto("São Paulo/SP", 20, "São Paulo")

tripulante1 = Tripulante("Damião", 32423, 32432, "Piloto")
tripulante2 = Tripulante("Luis", 32543543, 3121, "Copiloto")

passageiro1 = Passageiro('luis', 18, 858558, 'Brasil')

voo = Voo(23423,datetime.time(),datetime.date(2023,1,27),aeroporto1,aeroporto2,'nacional',10)
voo.setTripulacao([tripulante1, tripulante2])

ope = Operador("Davy",1000,232,2323,23)

reserva1 = ope.CriarReserva(10,voo, "sdsad", "Cartão")
reserva2 = ope.CriarReserva(100,voo, "sdsad", "Cartão")

reserva3 = passageiro1.CriarReserva(100,voo, passageiro1, "Cartão")
passageiro1.PagarReservas([reserva3])


print("Assentos livres: ",voo.AssentosLivres())

ope.CancelarReserva(reserva1)
passageiro1.CancelarReserva(reserva3)

print("Assentos livre: ",voo.AssentosLivres())

print("Número de tripulantes: {}".format(voo.NumeroTripulantes()))